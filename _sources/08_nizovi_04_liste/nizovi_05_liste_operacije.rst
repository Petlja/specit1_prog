Операције над листама
=====================

За многе задатке са листама нам је довољно то што можемо да формирамо листу (празну или преузимајући вредности из низа) и постепено је продужавамо. Поред тога, класа ``List`` има мноштво корисних метода који нам омогућавају да листе користимо на удобнији начин и да наши програми буду јаснији. 

Овде ћемо ради стицања представе поменути само неке од тих метода и показати како они могу да се користе, а више детаља се може наћи у званичној онлајн `документацији <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.8#methods>`_ .

Пражњење листе
--------------

Да бисмо уклонили све елементе из листе, користимо метод ``Clear()``. При томе капацитет листе остаје непромењен. На пример, извршавањем следећих наредби

.. code-block:: csharp

    List<int> a = new List<int>() { 3, 4, 5, 6, 7 };
    Console.WriteLine("Broj elemenata: {0}, kapacitet: {1}", a.Count, a.Capacity);
    a.Clear();
    Console.WriteLine("Broj elemenata: {0}, kapacitet: {1}", a.Count, a.Capacity);

добијамо овај резултат:

.. code::

    Broj elemenata: 5, kapacitet: 8
    Broj elemenata: 0, kapacitet: 8

Избацивање елемената из листе
-----------------------------

За избацивање елемената из листе постоји неколико различитих метода. Нека је ``a`` листа целих бројева.

- да бисмо избацили из листе прво појављивање елемента ``x``, пишемо ``a.Remove(x);`` Метод враћа ``false`` ако вредност није нађена у листи, а ``true`` ако је нађена и избачена.
- да бисмо избацили из листе елемент на позицији ``i``, пишемо ``a.RemoveAt(i);``
- да бисмо избацили из листе све елементе који испуњавају неки услов, пишемо ``a.RemoveAll(Predikat);``, где је ``Predikat`` метод који прихвата један аргумент истог типа као што су елементи листе, а враћа логичку вредност (која се користи као критеријум за избацивање). Метод ``RemoveAll`` враћа број избачених елемената.
- да бисмо избацили из листе ``n`` елемената почевши од позиције ``i``, пишемо ``a.RemoveRange(i, n);``

Следећи програм илуструје употребу метода за избацивање елемената из листе.

.. activecode:: nizovi_izbacivanje_iz_liste_demo
    :passivecode: true
    :coach:
    :includesrc: _src/nizovi/nizovi_izbacivanje_iz_liste_demo.cs

Резултат извршавања је:

.. code::

    Pocetna lista je: 1 2 3 4 5 6 7 6 5 4 3 2 1
    Nakon a.Remove(3), lista je: 1 2 4 5 6 7 6 5 4 3 2 1
    Nakon a.RemoveAt(0), lista je: 2 4 5 6 7 6 5 4 3 2 1
    Nakon a.RemoveAll(Paran), lista je: 5 7 5 3 1
    Broj izbacenih elemenata: 6
    Nakon a.RemoveRange(1, 3), lista je: 5 1

Поменимо и то да предикат може да се зада и анонимним методом, који се цео задаје на месту употребе уместо имена стандардног метода. На пример, уместо 

.. code-block:: csharp

    a.RemoveAll(Paran);

можемо да пишемо и 

.. code-block:: csharp

    a.RemoveAll(x => (x%2 == 0));
    
Ово је посебно згодно када је метод врло кратак и јасан сам по себи, а користи се на само једном месту у коду.

Убацивање елемената у листу
---------------------------

За убацивање елемената у листу такође постоји више начина. Узмимо поново за пример листу ``a`` целих бројева.

- да бисмо убацили у листу елемент ``x`` на позицији ``i``, пишемо ``a.Insert(i, x);``
- да бисмо убацили у листу све елементе низа или листе ``b`` од позиције ``i``, пишемо ``a.InsertRange(i, b);``

Осим ових метода за убацивање једног или више елемената на било које место у листи, користимо и сличне методе за додавање елемената на крај листе:

- за додавање елемента ``x`` на крај листе, користимо већ познати метод ``a.Add(x);``
- да бисмо додали на крај листе ``a`` све елементе низа или листе ``b``, пишемо ``a.AddRange(b);``

У програму који следи приказано је како функционишу ови методи.

.. activecode:: nizovi_ubacivanje_u_listu_demo
    :passivecode: true
    :coach:
    :includesrc: _src/nizovi/nizovi_ubacivanje_u_listu_demo.cs

Извршавањем програма добијамо овај излаз:

.. code::

    Pocetna lista je: 1 2 3
    Nakon a.Insert(1, 7), lista je: 1 7 2 3
    Nakon a.InsertRange(3, b), lista je: 1 7 2 21 22 3
    Nakon a.Add(9), lista je: 1 7 2 21 22 3 9
    Nakon a.AddRange(c), lista je: 1 7 2 21 22 3 9 91 92

Проналажење елемената у листи
-----------------------------

Претраживање је операција која се веома често користи, и то не увек на исти начин. Некад нам је потребан само први елемент који испуњава дати услов, некад последњи, а некад сви; некада нам треба вредност тог елемента, а некада његова позиција. Зато не чуди што у класи ``List`` постоји већи број метода посвећених претраживању: ``Contains``, ``Exists``, ``Find``, ``FindAll``, ``FindIndex``, ``FindLast``, ``FindLastIndex``. Ми ћемо ради илустрације описати само неке од ових метода, а као што смо на почетку лекције напоменули, детаљан опис употребе свих метода се може наћи у онлајн документацији.

Метод ``a.FindAll(Predikat)`` враћа листу свих елемената листе ``a`` који испуњавају дати услов описан методом ``Predikat`` (као у већ описаном методу ``RemoveAll``).

Када нам треба индекс једног елемента листе ``a`` који испуњава услов описан методом ``Predikat``, користимо један од метода ``FindIndex`` или ``FindLastIndex``. Ови методи враћају индекс траженог елемента, односно -1 када такав елемент не постоји.

- a.FindIndex(Predikat) враћа индекс првог елемента листе ``a`` који испуњава дати услов 
- a.FindIndex(i, Predikat) враћа индекс првог елемента листе ``a`` почев од позиције ``i``, који испуњава дати услов 
- a.FindIndex(i, n, Predikat) враћа индекс првог међу ``n`` узастопних елемената листе ``a`` почев од позиције ``i``, који испуњава дати услов 
- a.FindLastIndex(Predikat) враћа индекс последњег елемента листе ``a`` који испуњава дати услов 
- a.FindLastIndex(i, Predikat) враћа индекс последњег елемента листе ``a`` до позиције ``i``, који испуњава дати услов 
- a.FindLastIndex(i, n, Predikat) враћа индекс последњег међу ``n`` узастопних елемената листе ``a`` закључно са позицијом ``i``, који испуњава дати услов 

Из следећег програма се може видети како се могу користити ови методи.

.. activecode:: nizovi_pretrazivanje_liste_demo
    :passivecode: true
    :coach:
    :includesrc: _src/nizovi/nizovi_pretrazivanje_liste_demo.cs

Резултат рада програма је:

.. code::

    Pocetna lista je: 1 9 5 3 2 7 6 13 4
    a.FindIndex(Paran) vraca 4
    a.FindIndex(5, Paran) vraca 6
    a.FindIndex(1, 3, Paran) vraca -1
    a.FindLastIndex(Paran) vraca 8
    a.FindLastIndex(7, Paran) vraca 6
    a.FindLastIndex(7, 6, Paran) vraca 6
    a.FindAll(Paran) vraca listu: 2 6 4

~~~~

Мада овде нисмо поменули све постојеће методе класе ``List``, јасно је да она нуди моћну подршку за баратање листама. Ове методе за почетак вреди упознати бар толико да можемо да читамо програме у којима се користе. Када одлучимо да употребимо неки од ових метода у својим програмима, велику помоћ пружа и само окружење *Visual Studio* својим *IntelliSense* механизмима (аутоматско довршавање имена, листа метода који су на располагању, информације о параметрима итд.)

Неке од метода смо изоставили једноставно зато што нам није циљ да у потпуности изложимо функционалност класе ``List``, а неке и зато што њихова употреба претпоставља извесно предзнање и другачији контекст. Такви су, на пример, методи ``Sort`` и ``BinarySearch``, који ће бити тема у старијим разредима.
