Прости бројеви
==============

Подсетимо се да у програмима операција ``%`` представља остатак при дељењу. Када желимо да проверимо да ли је број ``n`` дељив бројем ``d``, проверавамо да ли је ``n % d == 0``. Оваква провера ће се редовно појављивати у програмима који следе.

.. questionnote::

    **Пример - да ли је број прост**
    
    За дати цео број :math:`n` проверити да ли је прост (исписати ``DA`` ако јесте, а ``NE`` ако није).

Као што знамо, природан број је прост ако је дељив само бројем 1 и самим собом. То значи да тест прималности броја :math:`n` (проверу да ли је број :math:`n` прост) можемо да обавимо тако што за сваки број од :math:`2` до :math:`n-1` проверимо да ли је :math:`n` дељив тим бројем. Ако :math:`n` није дељив ниједним од тих бројева, то значи да је прост. Овакво проверавање ради за све бројеве осим за број 1, па тај случај разматрамо посебно.

.. activecode:: deljivost_prost_1
    :passivecode: true
    :coach:
    :includesrc: _src/petlje/deljivost_prost_1.cs

Препознајете операцију претраживања - тражимо делилац броја :math:`n`. Ако га нађемо, број је сложен, у противном је прост.

Тестирајте програм и уверите се да исправно ради. Испробајте га и за неке велике бројеве, на пример :math:`n = 1~000~000~000`. Приметићете да на одговор треба сачекати. То није ништа чудно, јер програм обавља скоро милијарду провера. Питање је да ли је било неопходно да се обави толико провера.

Једна ствар коју можемо да учинимо да бисмо смањили број операција је да прекинемо петљу чим нађемо један делилац, јер тада већ знамо одговор. Тако, уместо 

.. code-block:: csharp

    if (n % i == 0)
        prost = false;
                
можемо да пишемо 

.. code-block:: csharp

    if (n % i == 0)
    {
        prost = false;
        break;
    }

Програм сада ради много брже за :math:`n = 1~000~000~000`. То је наравно зато што је ово :math:`n` дељиво са :math:`2`, а то значи да из петље излазимо већ у првој итерацији. Чак и да број није дељив баш са :math:`2`, број провера ће бити много мањи него у првој верзији. Често, али не увек. Испробајте измењен програм за :math:`n = 1~000~000~007`. Програм се поново дуго извршава. То је зато што је овај број прост, па нам наредба ``break`` ништа не помаже. Тело петље се поново извршава око милијарду пута. Можемо ли још нешто да учинимо?

Приметимо да ако је број :math:`n` сложен, не могу сви његови делиоци бити већи од :math:`\sqrt{n}`. Заиста, када би то било могуће, онда би за било који делилац :math:`d` броја :math:`n` бројеви :math:`d` и :math:`n/d` оба били делиоци од :math:`n` који су већи од :math:`\sqrt{n}`, па би њихов производ морао да буде већи од :math:`\sqrt{n} \cdot \sqrt{n} = n`, али :math:`d \cdot n/d = n`, то јест није веће од :math:`n`, што је контрадикција!

Ово значи да број :math:`n`, ако је сложен, мора имати делилац који је мањи или једнак :math:`\sqrt{n}`. Другим речима, ако број :math:`n` који је већи од :math:`2` нема делилац мањи или једнак од :math:`\sqrt{n}`, онда је тај број прост.

Захваљујући овом разматрању, број итерација можемо значајно да смањимо. Провере дељивости са :math:`i` могу да почну са :math:`i=2`, а да се прекину када је :math:`i \cdot i > n` (ако до тада није нађен делилац онда га и нема). 

.. activecode:: deljivost_prost_2
    :passivecode: true
    :coach:
    :includesrc: _src/petlje/deljivost_prost_2.cs

Сада, чак и за :math:`n = 1~000~000~007` програм даје резултат без застоја. То смо и очекивали, јер број операција је овај пут приближно :math:`\sqrt{1~000~000~007} < 32~000`. Дакле, програм је сада пар десетина хиљада пута бржи!

Програм се може и даље убрзавати, али не више овако драстично. На пример, можемо да искористимо чињеницу да је број :math:`2` једини паран прост број, па према томе и једини паран број за који треба проверити да ли је делилац од :math:`n` (ако :math:`n` није дељив са :math:`2`, онда није дељив ниједним парним бројем). Зато можемо проверу дељивости са :math:`2` да обавимо пре петље, а у петљи да почнемо од :math:`3` па да повећавамо :math:`i` за по :math:`2`, проверавајући на тај начин само непарне :math:`i`. Тиме би програм постао још двоструко бржи. 

.. activecode:: deljivost_prost_3
    :passivecode: true
    :coach:
    :includesrc: _src/petlje/deljivost_prost_3.cs

Даља убрзавања програма би била све мања, а овде нам и нису од значаја, па ћемо се на овоме зауставити.

Покушајте да решите задатке на тему дељивости, који следе у наставку.
