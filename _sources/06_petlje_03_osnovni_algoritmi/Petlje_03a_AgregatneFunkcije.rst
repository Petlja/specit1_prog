Агрегатне функције
==================

Код рачунања свих набројаних фунција карактеристично је да користимо једну променљиву, која ће на крају поступка садржати резултат. Променљивој додељујемо неку почетну вредност, а затим ту вредност поправљамо (ажурирамо) користећи један по један елемент серије. 

Почетна вредност коју додељујемо променљивој зависи од тога коју агрегатну функцију желимо да израчунамо. На пример, ако рачунамо збир, почетна вредност је 0, а ако рачунамо производ почетна вредност је 1 (зашто?). У случају рачунања минимума почетна вредност треба да буде неки веома велики број од кога елементи серије не могу да буду већи. Слично томе, када рачунамо максимум, почетна вредност треба да буде неки веома мали број.


.. questionnote::

    **Пример - минимум**
    
    Написати програм који учитава број *n*, а затим *n* целих бројева, а исписује најмањи од тих бројева.
    
Овај задатак се може решити на више начина. Ми ћемо употребити један, који се потпуно уклапа у општи опис оваквих поступака (иницијализација, а затим поправка резултата за сваки елемент серије). 

.. activecode:: osnovne_min
    :passivecode: true
    :coach:
    :includesrc: _src/petlje/osnovne_min.cs

Пошто за елементе серије бројева користимо променљиву типа *int*, онда резултат можемо да иницијализујемо као *int.MaxValue*. Ово је највећа вредност која може да стане у променљиву типа *int*, па је немогуће да елементи серије буду већи од те вредности. То значи или да ће се у *if* наредби бар једном поставити вредност резултата на неки од елемената серије, или су сви елементи серије једнаки овој максималној вредности.

Веома сличан поступак доводи до израчунавања максимума и других агрегатних функција. Ово је општи облик програма за рачунање разних агрегатних функција.

.. code-block:: csharp

    using System;

    class Program
    {
        static void Main()
        {
            int n = int.Parse(Console.ReadLine());
            int rezultat = A;
            for (int i = 0; i < n; i++)
            {
                int x = int.Parse(Console.ReadLine());
                B
            }
            Console.WriteLine(rezultat);
        }
    }

.. dragndrop:: agregatne_funcije
    :feedback: Покушајте поново!
    :match_1: максимум ||| A: int.MinValue; </br> B: if (rezultat < x) rezultat = x;
    :match_2: збир ||| A: 0; </br> B: rezultat += x;
    :match_3: производ ||| A: 1; </br> B: rezultat *= x;
    :match_4: конјункција </br>(са 0 и 1 уместо true и false) ||| A: 1; </br> B: if (x == 0) rezultat = x;
    :match_5: дисјункција </br>(са 0 и 1 уместо true и false) ||| A: 0; </br> B: if (x == 1) rezultat = x;
    
    У програму облика датог горе, упари оно што се израчунава са одговарајућим A и B
    
Још неке агрегатне функције се могу израчунати на скоро исти овај начин, с тим да се резултат након петље још мало доради. На пример, за рачунање геометријске средине *n* позитивних бројева потребно је израчунати њихов производ, а у завршном кораку израчунати *n*-ти корен тог производа.


У наставку можете наћи задатке за увежбавање израчунавања агрегатних функција над елементима серије.
