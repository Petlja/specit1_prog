Променљиве, подаци, типови
==========================

Променљива представља именовани простор у меморији, у коме се чува неки податак. Реч *променљива* указује на то да вредност која се у њој налази не мора да буде иста током целог извршавања програма. Постоје наредбе помоћу којих можемо у променљиве да уписујемо вредности, а такве наредбе можемо да искористимо у једном програму више пута за исту променљиву.

Ми смо већ видели неке програме у којима се појављују променљиве. Подсетимо се на пример, програма за израчунавање обима:

.. activecode:: obim2
    :passivecode: true
    :coach:
    :includesrc: _src/sekvencijalni/obim.cs

Обратимо сада пажњу на неке детаље овог програма. Наредбом

.. code-block:: csharp

    double r, Obim;

**Декларишемо** променљиве ``r`` и ``Obim``. Декларацијом променљиве најављујемо да намеравамо да користимо наведено име као име променљиве. При томе такође саопштавамо за какву врсту података намеравамо да користимо декларисану променљиву. Прецизније речено, испред имена променљивих које декларишемо, наводимо **тип података** који ће моћи да се смештају у променљиву. На основу тога рачунар "зна" колико простора је потребно одвојити за дату променљиву и како треба тумачити садржај уписан у ту променљиву. У овом примеру, променљиве су типа ``double``, што је један од типова за представљање бројева (о томе више у следећој лекцији).

Погледајмо сада и наредбу

.. code-block:: csharp

    Obim = 2 * r * Math.PI;

Овом наредбом се променљивој ``Obim`` додељује вредност, што значи да се у меморију додељену променљивој уписује садржај који представља потребну вредност. 

Данашњи рачунари су направљени тако да прихватају и приказују податке у облику који је нама близак. Међутим, за потребе складиштења и обраде, рачунари користе сасвим другачије начине представљања података. Да би се омогућило претварање података из облика погодног за рачунар у облик погодан за човека и обрнуто, смишљени су разни начини кодирања података помоћу нула и јединица. Ти бинарни кодови су прелазни облик, који је уведен да би се премостила разлика између представљања података за човека и представљања за рачунар. Различите врсте података се на различите начине представљају помоћу нула и јединица, да би се затим нуле и јединице представиле електричним импулсима, променама намагнетисања и слично (зависно од носача информација који користимо). Ово важи за све податке који се могу појавити у рачунару, било да је реч о бројевима, тексту, звуку, слици, видео записима или било којој другој врсти података.

Тип податка је важан зато што на основу њега извршиви програм примењује одговарајући начин кодирања података приликом његовог складиштења, одговарајући начин баратања кодираним обликом податка при његовој обради и одговарајући поступак декодирања (тумачења) када је потребно приказати податак.
