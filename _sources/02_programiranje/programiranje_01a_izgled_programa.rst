Изглед програма
===============

У приручнику `Увод у програмирање у програмском језику C# <https://petljamediastorage.blob.core.windows.net/root/Media/Default/Kursevi/spec-it/csharpprirucnik.pdf>`_ погледајте поглавља 1.1, 1.2, 1.3 и 1.4 (стране 1-12).

~~~~

У првим поглављима приручника могли сте да видите како изгледају програми написани на програмском језику *C#*. Завирили смо у неколико једноставних програма већ сада, пре него што се упустимо у детаљно учење правила и логике писања програма. У овим првим примерима смо могли да приметимо неколико ствари.

|

Програм обично почиње наредбом 

.. code-block:: csharp

        using System;

што нам омогућава да користимо разне функције библиотеке *System*, као што су *Console.ReadLine* и *Console.WriteLine*.

|

Текст можемо да испишемо из програма позивом функције *Console.WriteLine*. На пример, извршавањем наредбе 

.. code-block:: csharp

    Console.WriteLine("Kako se zoves?");

биће исписан текст *Kako se zoves?*

|
        
Текстуалне податке можемо да учитамо овако:

.. code-block:: csharp

    string s;
    s = Console.ReadLine();

Прва од ове две линије кода најављује да ћемо ознаку *s* користити у програму за именовање једног текстуалног податка. Можемо да кажемо да смо направили променљиву *s*, која садржи текст. Друга линија прихвата текст који откуцамо по покретању програма и омогућава нам да га касније користимо под именом *s*. Дакле, прочитани текст смо сместили у променљиву *s*. 

|
        
Видели смо и један једноставан програм који израчунава обим круга датог полупречника. Програм прихвата један реалан број (полупречник круга) обавља неко рачунање и исписује резултат (обим круга).

.. activecode:: obim1
    :passivecode: true
    :coach:
    :includesrc: _src/sekvencijalni/obim.cs
    
Из овог кратког програма се види:

- како да направимо променљиве које садрже реалне бројеве (*double r, Obim;*)
- како да учитани текст претворимо у број (*double.Parse(Console.ReadLine());*)
- како да обавимо рачунање у проргаму (*Obim = 2 * r * Math.PI;*)

итд. 

Још једном истичемо да ћемо о свему овоме тек причати детаљније и да овај поглед у програме служи само за стицање прве представе о томе како програми изгледају.

Можемо такође да приметимо да се у датом програму налази известан број облих и витичастих заграда, наводника, знакова једнакости, звездица и знакова интерпункције (тачка и тачка-зарез). Постоје прецизна правила о томе где треба писати које од ових знакова. Ако неки од ових знакова изоставимо или заменимо сличним знаком, програм неће моћи да се изврши. Зато је важно да на почетку разумемо какве све врсте правила постоје при писању програма и шта се дешава када прекршимо неко од тих правила. О томе говоримо у следећој лекцији.